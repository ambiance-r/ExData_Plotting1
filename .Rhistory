par(mar=c(1,1,1,1))
options(repr.plot.width=6, repr.plot.height=4)
plot(bsts.model)
options(repr.plot.width=8, repr.plot.height=4)
plot(bsts.model, "components")
## Burn-in:
burn <- SuggestBurn(0.1, bsts.model)
## Prediction:
p <- predict.bsts(bsts.model, horizon = 15, burn = burn, quantiles = c(.025, .975))
pFormatted <- ts(p$mean,frequency=4, start=c(2010,1))
options(repr.plot.width=8, repr.plot.height=4)
autoplot(train , ylab = 'GDP Growth') + scale_x_yearqtr() + autolayer(test, series="Test Data") + autolayer(pFormatted, series="Forecast")
## Calculate MAPE:
Fitted_MAPE <- pFormatted
Actual_MAPE <- test
MAPE <- mean(abs(Actual_MAPE-Fitted_MAPE)/Actual_MAPE)
## 95% forecast credible interval:
Date <- as.Date(time(GDPGrowth))
d1 <- cbind.data.frame(GDPGrowth, Date)
d2 <- d1[c(2:267),]
names(d2) <- c("Actual", "Date")
posterior.interval <- cbind.data.frame(as.numeric(test), 10^as.numeric(p$interval[1,]), 10^as.numeric(p$interval[2,]), subset(Date, year(Date)>2009))
names(posterior.interval) <- c("Fitted", "LL", "UL", "Date")
## Join intervals to the forecast:
d3 <- left_join(d2, posterior.interval, by="Date")
View(d3)
d32 <- d3[,c(3,1,2,4,5)]
View(d32)
ggplot(data=d32, aes(x=Date)) +
geom_line(aes(y=Actual, colour = "Actual"), size=1.2) +
geom_line(aes(y=Fitted, colour = "Predicted"), size=1.2, linetype=2) +
theme_bw() + theme(legend.title = element_blank()) + ylab("") + xlab("") +
geom_vline(xintercept=as.numeric(as.Date("2010-01-01")), linetype=2) +
geom_ribbon(aes(ymin=LL, ymax=UL), fill="grey", alpha=0.5) +
ggtitle("Actual vs Predicted") +
theme(axis.text.x=element_text(angle = -90, hjust = 0))
View(GDPGrowth_temp)
# Bayesian modelling:
# https://multithreaded.stitchfix.com/blog/2016/04/21/forget-arima/
library(lubridate)
library(bsts)
library(dplyr)
library(ggplot2)
### Load the data
data("AirPassengers")
Y <- window(AirPassengers, start=c(1949, 1), end=c(1959,12))
y <- log10(Y)
### Run the bsts model
ss <- AddLocalLinearTrend(list(), y)
ss <- AddSeasonal(ss, y, nseasons = 12)
bsts.model <- bsts(y, state.specification = ss, niter = 500, ping=0, seed=2016)
### Get a suggested number of burn-ins
burn <- SuggestBurn(0.1, bsts.model)
### Predict
p <- predict.bsts(bsts.model, horizon = 12, burn = burn, quantiles = c(.025, .975))
### Actual versus predicted
d2 <- data.frame(
# fitted values and predictions
c(10^as.numeric(-colMeans(bsts.model$one.step.prediction.errors[-(1:burn),])+y),
10^as.numeric(p$mean)),
# actual data and dates
as.numeric(AirPassengers),
as.Date(time(AirPassengers)))
names(d2) <- c("Fitted", "Actual", "Date")
### MAPE (mean absolute percentage error)
MAPE <- filter(d2, year(Date)>1959) %>% summarise(MAPE=mean(abs(Actual-Fitted)/Actual))
### 95% forecast credible interval
posterior.interval <- cbind.data.frame(
10^as.numeric(p$interval[1,]),
10^as.numeric(p$interval[2,]),
subset(d2, year(Date)>1959)$Date)
names(posterior.interval) <- c("LL", "UL", "Date")
### Join intervals to the forecast
d3 <- left_join(d2, posterior.interval, by="Date")
### Plot actual versus predicted with credible intervals for the holdout period
ggplot(data=d3, aes(x=Date)) +
geom_line(aes(y=Actual, colour = "Actual"), size=1.2) +
geom_line(aes(y=Fitted, colour = "Fitted"), size=1.2, linetype=2) +
theme_bw() + theme(legend.title = element_blank()) + ylab("") + xlab("") +
geom_vline(xintercept=as.numeric(as.Date("1959-12-01")), linetype=2) +
geom_ribbon(aes(ymin=LL, ymax=UL), fill="grey", alpha=0.5) +
ggtitle(paste0("BSTS -- Holdout MAPE = ", round(100*MAPE,2), "%")) +
theme(axis.text.x=element_text(angle = -90, hjust = 0))
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
x <- list(2, "a", "b", TRUE)
x
x[[1]]
class(x[[1]])
is.vector(x[[1]])
x <- 1:4
x
y <- 2
y
x+y
x <- c(17, 14, 4, 5, 13, 12, 10)
x
x[x>=11] <-4
x
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x>10]==4
x
x[x>10]<-4
x
library(readxl)
hw1_data <- read_excel("C:/Users/user/Desktop/Data Science - Foundations using R Specialization - Coursera/2 - R Programming - Coursera/Week 1 - Background, Getting Started, and Nuts & Bolts/quiz1_data/hw1_data.csv")
View(hw1_data)
library(readxl)
hw1_data <- read_excel("C:/Users/user/Desktop/Data Science - Foundations using R Specialization - Coursera/2 - R Programming - Coursera/Week 1 - Background, Getting Started, and Nuts & Bolts/quiz1_data/hw1_data.csv")
View(hw1_data)
df <- read.csv("hw1_data.csv")
df <- read.csv("C:/Users/user/Desktop/hw1_data.csv")
View(df)
head(df,2)
head(df,-2)
dim(df)
head(df,-151)
tail(df,2)
df[47,1]
df[1,1]
colSums(is.na(df))
mean(df[,1], na.rm=TRUE)
colMeans(df, na.rm = TRUE)
cc<-mean(df$Ozone[Ozone>31 & Temp >90])
cc<-colMeans(df[Ozone>31 & Temp >90])
Ozone
class(df)
newdata <- subset(df, Ozone > 31 | Temp < 90, select=c(Ozone))
View(newdata)
newdata2 <- subset(df, Ozone > 31 & Temp < 90, select=c(Ozone))
View(newdata2)
newdata3 <- subset(df, Ozone <= 31 | Temp <= 90, select=c(Ozone))
df <- read.csv("C:/Users/user/Desktop/hw1_data.csv")
newdata <- subset(df, Ozone > 31 & Temp > 90, select=c(Ozone))
newdata2 <- subset(df, Ozone <= 31 | Temp <= 90, select=c(Ozone))
View(newdata)
View(df)
newdata3 <- subset(df, Ozone > 31 & Temp > 90, select=c(Solar.R))
View(newdata3)
mean(newdata3)
newdata3
mean(newdata3)
class(newdata3)
mean(newdata3[,"Solar.R"])
newdata4 <- subset(df, Month = 6, select=c(Temp))
mean(newdata[,"Temp"])
View(newdata4)
mean(newdata4[,"Temp"])
newdata5 <- subset(df, Month = 6, select=c(Temp, Month))
View(newdata5)
newdata6 <- subset(df, Month == 6, select=c(Temp, Month))
View(newdata6)
mean(newdata6[,"Temp"])
newdata7 <- subset(df, Month == 5, select=c(Ozone, Month))
View(newdata7)
max(newdata7)
max(newdata7, na.rm=TRUE)
x <- list(2, "a", "b", TRUE)
a <- x[[1]]
class(a)
is.vector(a)
is.list(a)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
# R Programming - Week 2 - Programming Assignment 1:
specdata < - "C:\Users\user\Desktop\Data Science - Foundations using R Specialization - Coursera\2 - R Programming - Coursera\specdata"
directory <- specdata
setwd(directory)
getwd()
specdata < - "C:/Users/user/Desktop/Data Science - Foundations using R Specialization - Coursera/2 - R Programming - Coursera/specdata"
directory <- specdata
specdata < - "C:/Users/user/Desktop/Data Science - Foundations using R Specialization - Coursera/2 - R Programming - Coursera/specdata"
install.packages('RMySQL',type='source')
library(RMySQL)
library(RMySQL)
library(sqldf)
surveyDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
View(ucscDb)
result <- dbGetQuery(ucscDb, "show databases;")
View(result)
dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
View(result)
result
View(result)
dbConnect(MySQL())
windows()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
filename <- "ElectricPower.zip"
## Check if the archieve already exists:
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip"
download.file(fileURL, filename, method="curl")
}
if (!file.exists("ElectricPower")) {
unzip(filename)
}
powerconsumption <- read.table("C:\\Users\\user\\datasciencecoursera\\ExData_Plotting1\\household_power_consumption.txt",header=T,sep=";", dec = ".", na="?")
View(powerconsumption)
powerconsumption$Time <- strptime(paste(powerconsumption$Date, powerconsumption$Time), "%d/%m/%Y %H:%M:%S")
powerconsumption$Date <- as.Date(df$Date, "%d/%m/%Y")
powerconsumption$Date <- as.Date(powerconsumption$Date, "%d/%m/%Y")
mydates <- as.Date(c("2007-02-01", "2007-02-02"), "%Y-%m-%d")
powerconsumption <- subset(powerconsumption, Date %in% mydates)
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
png('plot1.png', width=480, height=480)
hist(dataset$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", xlim=c(0,6), col="red") #, freq=FALSE)
dev.off()
png('plot1.png', width=480, height=480)
#  hist(dataset$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", xlim=c(0,6), col="red") #, freq=FALSE)
hist(dataset$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="red") #, freq=FALSE)
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
png('plot2.png', width=480, height=480)
View(dataset)
plot(dataset$Global_active_power, type = "l", lwd = 10, main = " ")
dev.off()
png('plot2.png', width=480, height=480)
plot(dataset$Global_active_power, type = "l", main = " ")
dev.off()
png('plot2.png', width=480, height=480)
plot(dataset$Global_active_power, xlab="Global Active Power (kilowatts)", ylab=" ", type = "l", main = " ")
dev.off()
png('plot2.png', width=480, height=480)
plot(dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
dev.off()
png('plot2.png', width=480, height=480)
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
dev.off()
png('plot2.png', width=480, height=480)
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
png('plot3.png', width=480, height=480)
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
dev.off()
png('plot3.png', width=480, height=480)
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(1, 95, legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red", "blue"), lty=1:2, cex=0.8)
dev.off()
png('plot3.png', width=480, height=480)
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(1, 95, legend=c("topright","Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red", "blue"), lty=1:2, cex=0.8)
dev.off()
png('plot3.png', width=480, height=480)
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(1, 95, legend=c("topright","Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black","red", "blue"), lty=1)
dev.off()
png('plot3.png', width=480, height=480)
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend=c(x="topright","Sub_metering_1", "Sub_metering_2", "Sub_metering_3", col=c("black","red", "blue"), lty=1)
dev.off()
png('plot3.png', width=480, height=480)
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
# legend=c(x="topright","Sub_metering_1", "Sub_metering_2", "Sub_metering_3", col=c("black","red", "blue"), lty=1)
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'))
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
png('plot4.png', width=480, height=480)
par(mfrow = c(2,1))
# Plot 2:
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
# Plot 3:
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'))
dev.off()
View(dataset)
png('plot4.png', width=480, height=480)
par(mfrow = c(2,1))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'))
# Topright plot (new plot):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", type = "l", main = " ")
dev.off()
png('plot4.png', width=480, height=480)
par(mfrow = c(2,2))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'))
# Topright plot (new plot):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", type = "l", main = " ")
dev.off()
par(mfrow = c(2,2))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Topright plot (new plot):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'))
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", type = "l", main = " ")
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
## Generate the plot and save as a .png file:
png('plot4.png', width=480, height=480)
par(mfrow = c(2,2))
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Topright plot (new plot):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'))
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", type = "l", main = " ")
dev.off()
par(mfrow = c(2,2))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Topright plot (new plot):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), bty = "n")
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", ylab="global_reactive_power", type = "l", main = " ")
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
png('plot4.png', width=480, height=480)
par(mfrow = c(2,2))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Topright plot (new plot):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), bty = "n")
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", ylab="global_reactive_power", type = "l", main = " ")
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
## Generate the plot and save as a .png file:
png('plot4.png', width=480, height=480)
par(mfrow = c(2,2))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Topright plot (new plot):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), bty = "n")
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type = "l", main = " ")
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
## Generate the plot and save as a .png file:
png('plot4.png', width=480, height=480)
par(mfrow = c(2,2))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Topright plot (new plot):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), bty = "n")
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type = "n", main = " ")
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
dataset <- load_format_data()
## Generate the plot and save as a .png file:
png('plot4.png', width=480, height=480)
par(mfrow = c(2,2))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Topright plot (new plot):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), bty = "n")
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type = "l", main = " ")
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
## Load the data:
dataset <- load_format_data()
## Generate the histogram and save as a .png file:
png('plot1.png', width=480, height=480)
hist(dataset$Global_active_power, main="Global Active Power", xlab="Global Active Power (kilowatts)", ylab="Frequency", col="red") #, freq=FALSE)
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
## Load the data:
dataset <- load_format_data()
## Generate the plot and save as a .png file:
png('plot2.png', width=480, height=480)
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power (kilowatts)", type = "l", main = " ")
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
## Load the data:
dataset <- load_format_data()
## Generate the plot and save as a .png file:
png('plot3.png', width=480, height=480)
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'))
dev.off()
setwd("C:/Users/user/datasciencecoursera/ExData_Plotting1")
source("load_format_data.R")
## Load the data:
dataset <- load_format_data()
## Generate the plot and save as a .png file:
png('plot4.png', width=480, height=480)
par(mfrow = c(2,2))
# Topleft plot (Plot 2):
plot(dataset$Time, dataset$Global_active_power, xlab=" ", ylab="Global Active Power", type = "l", main = " ")
# Topright plot (new plot):
plot(dataset$Time, dataset$Voltage, xlab="datetime", ylab="Voltage", type = "l", main = " ")
# Bottomleft plot (Plot 3):
plot(dataset$Time, dataset$Sub_metering_1, xlab=" ", ylab="Energy sub metering", type = "l", main = " ")
lines(dataset$Time,dataset$Sub_metering_2, col="red")
lines(dataset$Time,dataset$Sub_metering_3, col="blue")
legend(x = "topright", col = c("black", "red", "blue"), lty = 1, lwd = 1, legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), bty = "n")
# Bottomright plot (new plot):
plot(dataset$Time, dataset$Global_reactive_power, xlab="datetime", ylab="Global_reactive_power", type = "l", main = " ")
dev.off()
